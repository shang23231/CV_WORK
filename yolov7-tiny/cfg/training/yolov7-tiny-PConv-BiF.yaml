# parameters
nc: 4  # number of classes
depth_multiple: 1.0  # model depth multiple
width_multiple: 1.0  # layer channel multiple

# anchors
anchors:
  - [10,13, 16,30, 33,23]  # P3/8
  - [30,61, 62,45, 59,119]  # P4/16
  - [116,90, 156,198, 373,326]  # P5/32

# yolov7-tiny backbone       PConv replace 3*3 conv  can   (light weight)
backbone:
  # [from, number, module, args] c2, k=1, s=1, p=None, g=1, act=True    args[numbers,size,stride,padding,g,activite]
  [[-1, 1, Conv, [32, 3, 2, None, 1, nn.LeakyReLU(0.1)]],  # 0-P1/2
  
   [-1, 1, Conv, [64, 3, 2, None, 1, nn.LeakyReLU(0.1)]],  # 1-P2/4    
   # ELAN-tiny
   [-1, 1, Conv, [32, 1, 1, None, 1, nn.LeakyReLU(0.1)]],  # 2-7
   [-2, 1, Conv, [32, 1, 1, None, 1, nn.LeakyReLU(0.1)]],
   [-1, 1, PConv, [32]],
   [-1, 1, PConv, [32]],
   [[-1, -2, -3, -4], 1, Concat, [1]],
   [-1, 1, Conv, [64, 1, 1, None, 1, nn.LeakyReLU(0.1)]],  # 7
   
   [-1, 1, MP, []],  # 8-P3/8  8 mp
   # ELAN-tiny
   [-1, 1, Conv, [64, 1, 1, None, 1, nn.LeakyReLU(0.1)]], #9-14
   [-2, 1, Conv, [64, 1, 1, None, 1, nn.LeakyReLU(0.1)]],
   [-1, 1, PConv, [64]],
   [-1, 1, PConv, [64]],
   [[-1, -2, -3, -4], 1, Concat, [1]],
   [-1, 1, Conv, [128, 1, 1, None, 1, nn.LeakyReLU(0.1)]],  # 14
   
   [-1, 1, MP, []],  # 15-P4/16
   # ELAN-tiny
   [-1, 1, Conv, [128, 1, 1, None, 1, nn.LeakyReLU(0.1)]], #16-21
   [-2, 1, Conv, [128, 1, 1, None, 1, nn.LeakyReLU(0.1)]],
   [-1, 1, PConv, [128]],
   [-1, 1, PConv, [128]],
   [[-1, -2, -3, -4], 1, Concat, [1]],
   [-1, 1, Conv, [256, 1, 1, None, 1, nn.LeakyReLU(0.1)]],  # 21
   
   [-1, 1, MP, []],  # 22-P5/32   # 22 mp
    # ELAN-tiny
   [-1, 1, Conv, [256, 1, 1, None, 1, nn.LeakyReLU(0.1)]], #23-28
   [-2, 1, Conv, [256, 1, 1, None, 1, nn.LeakyReLU(0.1)]],
   [-1, 1, PConv, [256]],
   [-1, 1, PConv, [256]],
   [[-1, -2, -3, -4], 1, Concat, [1]],
   [-1, 1, Conv, [512, 1, 1, None, 1, nn.LeakyReLU(0.1)]],  # 28
  ]

# yolov7-tiny head
head:
  # SPPCSPC-tiny
  [[-1, 1, Conv, [256, 1, 1, None, 1, nn.LeakyReLU(0.1)]], #29-37
   [-2, 1, Conv, [256, 1, 1, None, 1, nn.LeakyReLU(0.1)]],
   [-1, 1, SP, [5]],
   [-2, 1, SP, [9]],
   [-3, 1, SP, [13]],
   [[-1, -2, -3, -4], 1, Concat, [1]],
   [-1, 1, Conv, [256, 1, 1, None, 1, nn.LeakyReLU(0.1)]],
   [[-1, -7], 1, Concat, [1]],
   [-1, 1, Conv, [256, 1, 1, None, 1, nn.LeakyReLU(0.1)]],  # 37
  
   [-1, 1, Conv, [128, 1, 1, None, 1, nn.LeakyReLU(0.1)]], # 38
   [-1, 1, nn.Upsample, [None, 2, 'nearest']],  # Upsample   39
   [21, 1, Conv_ATT, [128, 1, 1, None, 1, nn.LeakyReLU(0.1)]], # route backbone P4  40

   [[-1, -2], 1, Concat, [1]],
   # ELAN-tiny
   [-1, 1, Conv, [64, 1, 1, None, 1, nn.LeakyReLU(0.1)]],  # 42-47
   [-2, 1, Conv, [64, 1, 1, None, 1, nn.LeakyReLU(0.1)]],
   [-1, 1, PConv, [64]],
   [-1, 1, PConv, [64]],
   [[-1, -2, -3, -4], 1, Concat, [1]],
   [-1, 1, Conv, [128, 1, 1, None, 1, nn.LeakyReLU(0.1)]],  # 47
  
   [-1, 1, Conv, [64, 1, 1, None, 1, nn.LeakyReLU(0.1)]], # 48
   [-1, 1, nn.Upsample, [None, 2, 'nearest']],  # Upsample   49
   [14, 1, Conv, [64, 1, 1, None, 1, nn.LeakyReLU(0.1)]], # route backbone P3
   [[-1, -2], 1, Concat, [1]], # 51
   # ELAN-tiny
   [-1, 1, Conv, [32, 1, 1, None, 1, nn.LeakyReLU(0.1)]], #52-57
   [-2, 1, Conv, [32, 1, 1, None, 1, nn.LeakyReLU(0.1)]],
   [-1, 1, PConv, [32]],
   [-1, 1, PConv, [32]],
   [[-1, -2, -3, -4], 1, Concat, [1]],
   [-1, 1, Conv, [64, 1, 1, None, 1, nn.LeakyReLU(0.1)]],  # 57
   
   [-1, 1, Conv, [128, 3, 2, None, 1, nn.LeakyReLU(0.1)]], # 58
   [[-1, 47], 1, Concat, [1]],
   # ELAN-tiny
   [-1, 1, Conv, [64, 1, 1, None, 1, nn.LeakyReLU(0.1)]], #60-65
   [-2, 1, Conv, [64, 1, 1, None, 1, nn.LeakyReLU(0.1)]],
   [-1, 1, PConv, [64]],
   [-1, 1, PConv, [64]],
   [[-1, -2, -3, -4], 1, Concat, [1]],
   [-1, 1, Conv, [128, 1, 1, None, 1, nn.LeakyReLU(0.1)]],  # 65
   
   [-1, 1, Conv, [256, 3, 2, None, 1, nn.LeakyReLU(0.1)]], # 66
   [[-1, 37], 1, Concat, [1]],
   # ELAN-tiny
   [-1, 1, Conv, [128, 1, 1, None, 1, nn.LeakyReLU(0.1)]], # 68-73
   [-2, 1, Conv, [128, 1, 1, None, 1, nn.LeakyReLU(0.1)]],
   [-1, 1, PConv, [128]],
   [-1, 1, PConv, [128]],
   [[-1, -2, -3, -4], 1, Concat, [1]],
   [-1, 1, Conv, [256, 1, 1, None, 1, nn.LeakyReLU(0.1)]],  # 73
      
   [57, 1, PConv, [128]], # 74
   [65, 1, PConv, [256]], # 75
   [73, 1, PConv, [512]], # 76

   [[74,75,76], 1, IDetect, [nc, anchors]],   # Detect(P3, P4, P5) # 77
  ]
